[
  {
    "name": "Empty Map",
    "input": "{}",
    "expected": "(source 0..2\n  (braces 0..2\n    (.open 0..1 '{')\n    (.close 1..2 '}')))"
  },
  {
    "name": "Empty Set",
    "input": "#{}",
    "expected": "(source 0..3\n  (braces 0..3\n    (.open 0..2 '#{')\n    (.close 2..3 '}')))"
  },
  {
    "name": "Empty Vector",
    "input": "[]",
    "expected": "(source 0..2\n  (brackets 0..2\n    (.open 0..1 '[')\n    (.close 1..2 ']')))"
  },
  {
    "name": "Empty Vector with gap",
    "input": "[   ]",
    "expected": "(source 0..5\n  (brackets 0..5\n    (.open 0..1 '[')\n    (.body 1..4)\n    (.close 4..5 ']')))"
  },
  {
    "name": "Keyword",
    "input": ":smile",
    "expected": "(source 0..6\n  (token 0..6 ':smile'))"
  },
  {
    "name": "Keyword with Prefix",
    "input": ":fun/day",
    "expected": "(source 0..8\n  (token 0..8 ':fun/day'))"
  },
  {
    "name": "Autoresolving Keyword",
    "input": "::run",
    "expected": "(source 0..5\n  (token 0..5 '::run'))"
  },
  {
    "name": "Autoresolving Aliased Keyword",
    "input": "::slow/dance",
    "expected": "(source 0..12\n  (token 0..12 '::slow/dance'))"
  },
  {
    "name": "Division Symbol Keyword",
    "input": ":/",
    "expected": "(source 0..2\n  (token 0..2 ':/'))"
  },
  {
    "name": "Integer",
    "input": "1",
    "expected": "(source 0..1\n  (token 0..1 '1'))"
  },
  {
    "name": "Negative Integer",
    "input": "-2",
    "expected": "(source 0..2\n  (token 0..2 '-2'))"
  },
  {
    "name": "BigInt Integer",
    "input": "11N",
    "expected": "(source 0..3\n  (token 0..3 '11N'))"
  },
  {
    "name": "BigDecimal Integer",
    "input": "99M",
    "expected": "(source 0..3\n  (token 0..3 '99M'))"
  },
  {
    "name": "Simple String",
    "input": "\"hello there\"",
    "expected": "(source 0..13\n  (string 0..13\n    (.open 0..1 '\"')\n    (.body 1..12 'hello there')\n    (.close 12..13 '\"')))"
  }  
]